module toggle
(
  input wire clk,reset,enable,
  input wire [11:0]cntUPTO,
  input wire [4:0] outputVEC1,outputVEC2,
  output reg done,
  output wire [4:0]outputVEC
  );
  
 
  //PLL instansiate
  pll pll (
   .inclk0(clk),
	.c0(clk200),
	.locked(locked)
	);
	
	wire locked;
   wire clk200;
  
  
  //state declaration
  localparam [1:0]
   toggleWAIT = 2'b00,
	toggle1    = 2'b01,
	toggle2    = 2'b10,
	toggleDONE = 2'b11;
	
	//constant declaration
	localparam TOGGEL_SETUP = 3;  //how many clk cycles needed
	localparam TOGGEL_HOLD  = 2;
	
	//signal declaration
	reg [1:0] state_reg, state_next;
	reg [11:0]internalCNT_reg,internalCNT_next;	
	reg [3:0] delayCNT_reg,delayCNT_next; 
	reg outputVEC_enable_reg,outputVEC_enable_next;
	
	
	//FSM 
	always @ (posedge clk, posedge reset)
	if(reset)
	  begin
	     state_reg <= toggleWAIT;
		  internalCNT_reg <= 0;
		  delayCNT_reg <= 0;
		  outputVEC_enable_reg <=0;    
	  end
	 else
	  begin
	     state_reg <=state_next;
		  internalCNT_reg <= internalCNT_next;
		  delayCNT_reg <=delayCNT_next;
		  outputVEC_enable_reg <= outputVEC_enable_next;
	  end
		
	 //FSM next-state logic
	 always @*
	 begin
	   state_next=state_reg;
		done=0;
		internalCNT_next=internalCNT_reg;
		delayCNT_next=delayCNT_reg;
		outputVEC_enable_next= outputVEC_enable_reg;
		case(state_reg)
		 //
		  toggleWAIT:
		    begin 
			  //if(enable)
			  if(enable && locked)
			    begin
			     state_next=toggle1;
				  outputVEC_enable_next=0;
				 end
			 end
		//
		  toggle1:
		    begin
			 delayCNT_next=delayCNT_reg+4'd1;
			  if(delayCNT_next==TOGGEL_SETUP)
			    begin
				   state_next=toggle2;
					outputVEC_enable_next=1;
					internalCNT_next=internalCNT_reg+4'd1;
				 end
			  end
		//
		  toggle2:
		    begin
			  delayCNT_next=delayCNT_reg+4'd1;
			   if(delayCNT_next== (TOGGEL_SETUP+TOGGEL_HOLD))
				  begin
				   if(internalCNT_reg==cntUPTO)
					   state_next=toggleDONE;
						//Could try put done=1 here
					else
					  begin
					   state_next=toggle1;
						delayCNT_next=0;
						outputVEC_enable_next=0;
					  end
				  end
			 end
		//
		  toggleDONE:
		    begin
			  done=1;
			  internalCNT_next=0;
		     delayCNT_next=0;
			  outputVEC_enable_next= 0;
			  if(!enable)
			   state_next=toggleWAIT;
			 end
			default: state_next=toggleWAIT;
		endcase
	end
	
	
	 //output
	 assign outputVEC=outputVEC_enable_reg?outputVEC2:outputVEC1;

endmodule
		 